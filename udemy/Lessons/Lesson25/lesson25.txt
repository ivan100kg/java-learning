// Полиморфизм. Оператор «instanceof»

--- Polymorphism ---
    Способность объекта принимать несколько форм.
    Полиморфный объект имеет несколько форм IS-A.
    Полиморфизм - способность метода вести себя по разному в зависимости от
    вызывающего объекта.
    Самый частый случай это создание Parent переменной ссылающейся на 
    объект сабкласса.
    Перезаписанный методы - это полиморфные методы.

--- instanceof ---
    Проверяет есть ли между объектом и классом/интерфейсом связь IS-A.
    Car c = new Car();
    System.out.println(c instanceof Car);       // true
    System.out.println(c instanceof Object);    // true

--- Casting(приведение типов) ---
    Reference types:
    Процесс когда вы заставляете ппеременную одного типа вести себя как 
    переменную другого типа данных.
    Кастинг возможен только когда между классами/интерфейсами есть связь IS-A.
    Делаая кастинг тип данных объекта не меняется, вы заставляете его
    чувствовать как объект другого типа.
    В двух словах, исп-ся в случае необходимости использовать методы или
    переменные сабклассов с пом переменной суперкласса.

    Upcasting:
        когда переменную сабкласса заст себя вести как перем суперкласса.
        Employee e = new Driver();  // автокастинг
    Downcasting:
        когда переменную суперкласса заставляют себя вести как перем сабкласса
        Driver d = (Driver) e;      // не автоматический кастинг

    ((Doctor) emp).attr;    // emp - переменная суперкласса Employee, компил-ру
                               явно указ-ся вести себя как пер сабкласса Doctor.
    Doctor d = (Doctor)emp; // пример Employee IS-A Doctor (что не должно 
                               работать но с пом кастинга работает).
    Перебор объектов Employee в цикле
    Employee[] arr = {emp1,emp2,emp3,emp};  // объекты разных сабклассов
    for (Employee e : arr){
        if (e instanceof Driver) {          // проверяем на innstanceof и
            ((Driver) e).drive();              применяем кастинг.
        }
    }
    Example2:
    String[] arr1 = {"Hello", "Bye"};
    Object[] arr2 = arr1;                   // upcasting
    String[] arr3 = (String[]) arr2;        // downcasting

    Primitive types:
    Widening/расширение - переход из меньшего типа данных в больший
                         char
                          |
                          v
        byte -> short -> int -> long -> float -> double
    Example:
        double d = 'a'; // char to double
        long l = b;     // byte var b to long        
    
    Narrowing/сужение - переход в меньшие типы данных.
    Без кастинга 3 условия:
        - int приводится к byte,short,char:             byte b = 10;
        - знач int это константа(final или литерал):    short s = 2;
        - значение int помещается в соотв тип данных:   byte b = 127;
    В остальных случаях:
    Любой более большой тип данных можно преобразовать к меньшему с помощью
    кастинга/приведения (type).
    b = (byte) 12.45;   // приведение к целочисленным типам данных дробная часть
                           усекается
    byte b = (byte)999; // если больше вместимости то будет переполнение        

    Numeric promotion:
    Конвертация меньшего численного типа в больший.
    Условия когда происходит:
        - если есть 2 значения разных типов - ковертируется в больший
        - если одно дробное а второе целое получ дробное(т.к. оно числ больше)
        - если byte, short, char участв в арифм операц - то они перед этим
          конвертируются в int. Исключение -  унарные операторы ++ --
        - результирующее значение принимает тип операнды.
