// Исключения и Ошибки

--- java.io ---
    Пакет с классами и итнтерфейсами ввода/вывода.
    File("path")            // абстрактная репрезентация пути к файлу.
    FileInputStream         // создать поток, для чтения из источника
    FileOutputStream        // создать поток, для записи в источник.
    FileNotFoundException   // исключение, файл не найден, может выбрасываться
                               двумя классами выше.
    IOExeption              // могут выбрасываться методами write и read,
                               классами выше, не читается/записывается.
                               
--- Исключения ---
    Иерархия классов:
    Object <--+ 
              |
              +- Throwable  // главный класс для 'выбрасываемых' объектов
                 ^   ^
                 |   Error  // класс Ошибок со своими подклассами
                Exception   // класс Исключений со своими подклассами
                 ^
           RuntimeException // один из основных, имеет множество подклассов
    
    Сабклассы RuntimeException:
    Unchecked exceptions, Java не заставляет их проверять.
    Ткие исключения возникают по вине программиста.
    Можно не объявлять(throws) и не обрабатывать(try-catch).
    Компилятор не в состоянии проверить возможность выброса этих исключений.
    Например NullPointerException - невозможно предугадать, ловить эти
    исключения можно, но не обязательно.

    Сабклассы Exception
    Cheked исключения указ на часть кода, который находится за пределами
    непосредственного контроля программой и который может явл причиной 
    выброса исключений, как правило это работа с внешними источниками - 
    файлы, бд, сеть. Компилятор всегда проверяет возможность выброса искл.
    Эти искл должны быть обязат или объявлены(throws) и/или обработаны(try).

    Если метод 'a' использует внутри себя метод 'b', который может внутри себя
    выбросить checked exception то метод должен:
        1. Или заключить вызов метода b в try/catch блоки
        2. Или/и объявить, что он может выбросить это checked исключение
           или super класс этого исключения - например Exception.

--- try/catch/finnaly ---
    Обработка исключений:
    try {                   // try - 1 block
        code;
    } catch (Exception e) { // перехват исключения, может быть many catch
        code;
    } finally {             // выполняется всегда - 1 block
        code;
    }
    e - показывает тип исключения и сообщение/разъяснение.
    e.getMessage()          // сообщение исключения
    e.printStackTrace(      // вывод стэка ошибки
    
    Порядок перехвата исключений от наследников к базовым, если поставить
    базовый класс Throwable на первый catch - остальные никогда не обработ. 
    catch (FileNotFoundException e) {
        System.out.println("Caught exc 1");
    } catch (Exception e) {
        System.out.println("Caught exc 2");
    } catch (Throwable e) {
        System.out.println("Caught exc 3");
    }
    После возникновения исключения что в блоке try, что в другом блоке - 
    оставшаяся часть кода блока уже не обрабатывается.
    После выброса исключения виден стек трейс для всех задействованных 
    в этом методах.
    Конструктор объекта исключения может принимать строку или ничего не прин.
    Если в блоках try и catch присутствует return, то блок finally срабатывает
    до return. И если организ return в finally то сработает он в люб исходе.
    Если при return из try/catch возвращается примитивный тип данных то он
    как бы копируется в return и уже после в finally значение переменной 
    изменить нельзя, ссылочный объект(mu) конечно можно.
    Finally не срабатывает только если в блоках try catch организ System.exit
    или при крушении JVM/OS.
    Исключение может быть перевыброшено. Т.е. в блоке catch можно снова
    перевыбросить (throw) исключение, его обраб занимается вызывающая ф-ия.
    Поддерживаются вложенные(nested) try-catch.
    Если исключения выбрасываются в catch блоке оно дол быть обработано
    во вложенном блоке, т.к. в этом же блоке поймать нельзя.


--- throws ---
    Выброс исключений
    void abc() throws Exception {}  // говорит компилятору что может 
                                       выбрасываться исключение и что можно
                                       не обрабытывать его обязательно в коде
                                       (для Checked). 
    throw e;    // выбросить исключение e(объект класса исключения).
                   если исключение checked - не забудь в методе throws.
    Example:
    static void def(){
        throw new NullPointerException("Bla-bla");  // выброс RuntimeException
    }
    static void foo() throws IOException {          // выброс checked, указываем
        throw new FileNotFoundException("Bla");        в throws исключение, либо
    }                                                  его суперкласс как тут.

--- Error ---
    Не стоит обрабатывать или объявлять - считается глупой затеей.
    Как и runtime exceptions считаются unchecked.
    
    
