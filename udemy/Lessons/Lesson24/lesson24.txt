// abstract классы и abstract методы

--- Abstract method ---
    abstract void per();    // нет тела
    Недопустимо:
        final abstract      // так как дол быть перезаписан
        private abstract    // так как дол быть унаследован
        static abstract     // так как дол быть перезаписан

--- Abstract class ---
    Нельзя создать объект класса.
    Если в классе присутствует абстрактный метод - то класс дол быть abstract.
    Abstract class может содержать, а может и не содержать абстрактные методы.
    Сабкласс должен перезаписать все абс методы либо тоже быть абстрактным.
    Можно исп ref vars типа abstract класса чтобы ссылаться на объект сабкласса
    который не является абстрактным.
    Не может быть final (можно сказать противоположные понятия).
    Переменные не могут быть абстрактными.
    Может иметь конструкторы.
    Любой перезаписываемый метод может быть как абстракт так и не абстракт.
    Конкретный класс - сабкласс кот перезаписал все абс методы.
	AbsParent p = new Child();	// такое разрешено

--- Interface ---
    Java 7
	Интерфейс это не класс это как бы протокол который можно имплементировать
	классом.
	Интерфейс может быть public(1 в файле с таким же именем) либо default.
	abstract interface Help{}	// создать интерфейс, abstract можно опустить
	Интерфейс не может быть final.
    Все методы в интерфейсах - public abstract, словa public abstract можно
    опустить - компилятор их поставит авто.
	Методы интерфейса не могут быть final.
    class Teacher extends Employee implements Help  // осуществить интерфейс
    class Teacher implements Help   // (без extends) осуществить интерфейс
    class T extends E implements Help, Swim, ...    // many interfaces
    Внутри класса осуществляюго интерфейс необходимо перезаписать абс методы
    или сделать класс абстрактным(все как с абстрактными классами)
	Интерфейсы могут содержать константы - public final static int A = 10;
	Если класс имплементирует интнрфейс то он гарантированно будет иметь
	все методы интерфейса.
	Интерфейсы описывают что должно быть сделано, но как это будет сделано
	определяется в классах имплементирующих этот интерфейс.
	InterParent p = new Child();	// такое разрешено, но опять же переменная
	                     			   интерфейса может обращаться к перезап-м
									   методам интерфейса классом Child.
	Нельзя создать объект.
	Не имеют конструкторов.
	interface i2 extends i1{}		// Интерфейсы могут наследовать другие 
									   интерфейсы
    abstract class implements i1	// абстрактный класс может имп интерфейс
									   может оверрайдить все или часть или ни
									   одного метода, по желанию.
	
--- class vs interface ---
	Class can extends 0 or 1 class.
	Class can implements 0 or more interfaces.
	Interface can't implements or extends class.
	Interface can extends 0 or more interfaces.
	
--- new in Java 8 ---
	Методы в интерфейсах возможно объявить default(это не access modifier),
	а дефолтная реализация public метода.
	Такие методы могут быть исп только в интерфейсах.
	Не может быть final, static, abstract.
	interface I1{
    public default void def(){	// всегда имеет реализацию, можно не override
        System.out.println("def method");
    }	// перезаписывается с acess modifier public void def(){}
	Можно использовать public static методы.
	Они не наследуются и обращаться к ним можно только через имя интерфейса,
	даже если не имплементировать сам интерфейс.
	I1 Ret(){return new Zz(I1 i1);}	// можно использовать в return types,
									   в параметрах метода, подставлять классы
									   импл этот интерфейс.

// 1:29:50