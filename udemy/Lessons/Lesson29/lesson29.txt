// lambda

--- Lambda exspressions ---
    Анонимный метод(без имени).
    Переопред метода инт-йса без создания класса имплементирующуго этот инт-йс.
    ->  // оператор в лямда выр - разделяет список параметров и тело метода.
    interface I { void foo(); } // функциональный интерефейс(1 метод)
    bar(() -> {code;})          // переопределение метода
    public class A { // класс в методе которого используется интерфейс
        // метод, один из параметров которого интерфейс I
        static void foo(double b, I i, int a) {
            // в методе класса идет вызов метода интерфейса i.bar(param)
            // для наглядности используются доп параметры
            System.out.println(a + " Hi " + i.bar(" bla-bla ") + b);
        }
        public static void main(String[] args) {
            // вызываем метод класса и переопределяем метод интерфейса на месте.
            foo(2.72, (String s) -> {   // здесь идет переопределение метода
                return "everyone" + s;  // интерфейса, без создания доп класса.
            }, 12);                     // (String s) мож просто (s) - параметр
        }                               // {return "everyone" + s;} - тело
                                        // 2.72 и 12 - доп параметры для нагляд
    }
    // чтобы использовать lambda выражения в интерфейсе дол быть только 1 метод
    // Функциональный интерфейс - интерфейс с 1 абстрактным методом
    interface I {               // Функциональный интерфейс 
        String bar(String s);   // метод который должен быть переопределен
    }    
    Способы написания lambda:
    (int i, int j) -> {  // указ тип папаметра, несколько инструкций.
        i += 10;
        return i;
    }
    (i,y) -> i+y        // неск параметров, 1 инструкция, возвращ int
    i -> {return i+10;} // если 1 парам - без указания типа параметра
    i -> i+10           // самый сокращенный, если 1 инструкция.
    () -> 5             // нет параметров, возврат int
    () -> {}            // без аргументов и без тела

