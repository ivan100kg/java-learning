// Overriding Hiding Final

    Employee        # base class
    |      |
    Doctor Teacher  # extendent classes

Doctor d = new Doctor();    # переменная определенного типа может ссылаться на
                              объект того же типа
Employee e = new Doctor();  # переменная базового класса может сссылаться на
                              любой объект сабкласса и саб сабклассов и т.д...
                              Другими словами Doctor это Employee(Рабочий).
Object obj = new Doctor();  # переменная супер класса может ссылаться на люб obj
Doctor d != new Employee(); # Нельзя. Рабочий - не обязательно водитель.

Переменные суперклассов хоть и ссылаются на объекты сабклассов, но все же могут
обращаться только к унаследованным аттрибутам супер(своего же) класса!
Если метод был overriden - произойдет вызов overriden метода сабкласса, несмотря
на то что это переменная типа суперкласса.

--- Функция возвращающая любой объект ---
    public Object abc() {
        return new StringBuilder("hey");
    }

--- Overriding ---
Это изменение non-static, non-final метода в sub классе, который он 
унаследовал от parent класса.
Private методы не наследуются, поэтому их нельзя перезаписать.
Final методы не могут быть перезаписаны
@Override   # аннотация для пересзаписываемого метода
Overriden methods:
    Имя в сабклассе такое же как в суперклассе.
    Список аргументов совпадает, иначе будет overloaded.
    Return types совпадают или return тип у overriden метода это подкласс
        return типа у метода супер класса (ковариантные return types)
    Access modifier в сабклассе тако же или менее строгий, чем в parent классе.
        private > default > protected > public (от строгого к менее строгому).
    Метод в сабклассе должен быть non-static.

--- Binding ---
Определение вызываемого метода, основываясь на объекте, который производит 
вызов или типе данных reference variable.
2 типа binding:
    Compile time binding    // осуществляется во время компиляции
        private methods        эти методы не могут быть перезаписаны
        static methods         поэтому компилятор знает из какого класса их выз.
        final methods
        variables           // все типы переменные также опред здесь.
    Run time binding        // во время выполнения
        other methods          в остальных случаях определение из какого
                               класса вызвать метод происх во время выполнения.
    
--- Hiding ---
Перекрытие static метода суперкласса static методом сабкласса.
Private методы и переменные не наследуются, поэтому их нельзя скрыть.
Final static нельзя скрыть.
Hidden methods:
    Имя методов одинаковое.
    Список аргументов одинаковый.
    Return type одинаковый, либо ковариантные return types(см. выше).
    Access modifier такой же или менее строгий чем в parent классе.
    Если в супер классе это static - то и в сабклассе static.
hidden variables:
    Переменная с таким же именем скрывает переменную в супер классе,
    модификаторы и типы могут быть любые, все равно скроет.

--- Final ---
    Final class - класс не может иметь потомков.
    методы нельзя перезаписать или скрыть
    переменные также нельзя скрыть
    конструкторы final несуществует

--- super ---
    super.var   # обращение из подкласса к атрибутам суперкласса
                  super - как бы объект суперкласса
    Правила схожи с this
    Нельзя исп в статических методах и переменных(присваивание через объект).
    super может обращаться только к видимым из сабкласса атрибутам суперкласса.
    super в отличие от super не обязателен на 1-ой строке тела метода.
